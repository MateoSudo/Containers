kind: pipeline
type: docker
name: torrent-media-stack

# Only trigger when files in Torrent/ folder change
trigger:
  paths:
    include:
      - "Torrent/**"
  event:
    - push
    - pull_request

volumes:
  - name: docker-socket
    host:
      path: /var/run/docker.sock

steps:
  # =============================================================================
  # YAML VALIDATION
  # =============================================================================
  - name: validate-yaml
    image: alpine:latest
    commands:
      - echo "[INFO] Validating YAML syntax..."
      - apk add --no-cache yq
      - echo ""
      - echo "1. Checking Drone YAML syntax:"
      - |
        if yq eval '.kind' .drone.yml >/dev/null 2>&1; then
          echo "  [SUCCESS] Drone YAML syntax is valid"
        else
          echo "  [ERROR] Drone YAML syntax error:"
          yq eval '.kind' .drone.yml 2>&1 || true
          exit 1
        fi
      - echo ""
      - echo "2. Checking for formatting issues:"
      - |
        if grep -P '\t' .drone.yml; then
          echo "  [ERROR] Tab characters found - use spaces only"
          exit 1
        fi
        if grep ' $' .drone.yml; then
          echo "  [WARNING] Trailing spaces found"
        fi
      - echo "[SUCCESS] YAML validation completed"

  # =============================================================================
  # DOCKER COMPOSE VALIDATION
  # =============================================================================
  - name: validate-compose
    image: docker:24-dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
    commands:
      - echo "[INFO] Validating Docker Compose configuration..."
      - cd Torrent
      - echo ""
      - echo "1. Checking docker-compose.yml:"
      - |
        if [ ! -f docker-compose.yml ]; then
          echo "  [ERROR] docker-compose.yml not found"
          exit 1
        fi
        echo "  [SUCCESS] docker-compose.yml found"
      - echo ""
      - echo "2. Validating Docker Compose syntax:"
      - |
        if docker compose config >/dev/null 2>&1; then
          echo "  [SUCCESS] Docker Compose syntax is valid"
        else
          echo "  [ERROR] Docker Compose validation failed:"
          docker compose config 2>&1 || true
          exit 1
        fi
      - echo ""
      - echo "3. Checking required services:"
      - |
        required_services="pia-vpn qbittorrent sonarr radarr lidarr prowlarr jellyfin"
        for service in $required_services; do
          if docker compose config | grep -q "^  $service:"; then
            echo "    [SUCCESS] Service '$service' configured"
          else
            echo "    [WARNING] Service '$service' not found"
          fi
        done
      - echo "[SUCCESS] Docker Compose validation completed"

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  - name: security-scan
    image: aquasec/trivy:latest
    commands:
      - echo "[INFO] Running security analysis..."
      - cd Torrent
      - echo ""
      - echo "1. Docker Compose security check:"
      - |
        # Check for privileged containers
        if grep -q "privileged.*true" docker-compose.yml; then
          echo "  [WARNING] Privileged containers detected"
        else
          echo "  [SUCCESS] No privileged containers"
        fi
        
        # Check for host network mode
        if grep -q "network_mode.*host" docker-compose.yml; then
          echo "  [WARNING] Host network mode detected"
        else
          echo "  [SUCCESS] Isolated networking used"
        fi
        
        # Check user configuration
        if grep -q "PUID.*1000" docker-compose.yml; then
          echo "  [SUCCESS] Non-root user configuration found"
        else
          echo "  [WARNING] Verify non-root user setup"
        fi
      - echo ""
      - echo "2. Container image vulnerability scan:"
      - |
        echo "  Scanning images for vulnerabilities..."
        images=$(grep "image:" docker-compose.yml | sed 's/.*image: *//g' | sort -u)
        for image in $images; do
          echo "    Scanning $image..."
          trivy image --severity HIGH,CRITICAL --quiet --format table "$image" || echo "    [WARNING] Scan failed for $image"
        done
      - echo "[SUCCESS] Security scanning completed"

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  - name: deploy
    image: docker:24-dind
    volumes:
      - name: docker-socket
        path: /var/run/docker.sock
    commands:
      - echo "[INFO] Starting deployment..."
      - echo ""
      - echo "Build Information:"
      - echo "  Branch:" "$DRONE_BRANCH"
      - echo "  Commit:" "$DRONE_COMMIT"
      - echo "  Author:" "$DRONE_COMMIT_AUTHOR"
      - echo "  Build:" "$DRONE_BUILD_NUMBER"
      - echo ""
      - apk add --no-cache bash
      - cd Torrent
      - echo "Files in Torrent directory:"
      - ls -la
      - echo ""
      - echo "1. Preparing environment..."
      - |
        if [ ! -f .env ]; then
          if [ -f .env.example ]; then
            cp .env.example .env
            echo "  [SUCCESS] Created .env from template"
            echo "  [WARNING] Ensure PIA credentials are configured"
          else
            echo "  [ERROR] No .env.example template found"
            exit 1
          fi
        else
          echo "  [SUCCESS] .env file exists"
        fi
      - echo ""
      - echo "2. Stopping existing stack..."
      - |
        if [ -f docker-compose.yml ]; then
          echo "  Stopping containers with docker compose down..."
          docker compose down --remove-orphans 2>/dev/null || echo "  No existing stack running"
          echo "  [SUCCESS] Stack stopped and cleaned"
        else
          echo "  [ERROR] docker-compose.yml not found"
          exit 1
        fi
      - echo ""
      - echo "3. Creating directories..."
      - |
        echo "  Creating required directories..."
        mkdir -p /mnt/truenas/downloads 2>/dev/null || echo "  Note: /mnt/truenas may not be mounted"
        mkdir -p /mnt/truenas/media/tv 2>/dev/null || echo "  Note: /mnt/truenas may not be mounted"
        mkdir -p /mnt/truenas/media/movies 2>/dev/null || echo "  Note: /mnt/truenas may not be mounted"
        mkdir -p /mnt/truenas/media/music 2>/dev/null || echo "  Note: /mnt/truenas may not be mounted"
        echo "  [SUCCESS] Directory structure prepared"
      - echo ""
      - echo "4. Starting media stack..."
      - docker compose up -d
      - echo ""
      - echo "5. Checking container status..."
      - sleep 10
      - docker compose ps
      - echo ""
      - echo "[SUCCESS] Deployment completed successfully!"
      - echo ""
      - echo "Services will be available at:"
      - echo "  - QBittorrent: http://localhost:8083 (via VPN)"
      - echo "  - Other services: Via Cosmos Cloud proxy"
      - echo ""
      - echo "[WARNING] Remember to:"
      - echo "  - Configure PIA credentials in .env"
      - echo "  - Change default passwords"
      - echo "  - Set up Cosmos Cloud routes"
    when:
      branch:
        - main

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  - name: notify-success
    image: alpine:latest
    commands:
      - echo "[SUCCESS] DEPLOYMENT SUCCESSFUL"
      - echo ""
      - echo "Pipeline Details:"
      - echo "  Branch:" "$DRONE_BRANCH"
      - echo "  Build:" "$DRONE_BUILD_NUMBER"
      - echo "  Author:" "$DRONE_COMMIT_AUTHOR"
      - echo "  Time:" "$(date)"
      - echo ""
      - |
        if [ "$DRONE_BRANCH" = "main" ]; then
          echo "[SUCCESS] Production deployment completed!"
          echo "[INFO] VPN protection active for torrents"
          echo "[INFO] Configure Cosmos Cloud for web access"
        else
          echo "[SUCCESS] Validation passed - ready for production"
        fi
    when:
      status:
        - success

  - name: notify-failure
    image: alpine:latest
    commands:
      - echo "[FAILED] DEPLOYMENT FAILED"
      - echo ""
      - echo "Pipeline Details:"
      - echo "  Branch:" "$DRONE_BRANCH"
      - echo "  Build:" "$DRONE_BUILD_NUMBER"
      - echo "  Author:" "$DRONE_COMMIT_AUTHOR"
      - echo "  Time:" "$(date)"
      - echo ""
      - echo "Common issues to check:"
      - echo "  - Missing .env.example file"
      - echo "  - Invalid docker-compose.yml syntax"
      - echo "  - Docker daemon connection"
      - echo "  - Missing mount points"
      - echo ""
      - echo "Check build logs for detailed error information"
    when:
      status:
        - failure