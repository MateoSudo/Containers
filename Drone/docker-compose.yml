# =============================================================================
# Drone CI/CD Stack for Docker with Cosmos Cloud Proxy Integration
# =============================================================================
# This compose file deploys Drone server and runner for container-based CI/CD
# Traffic flows: Internet → Cloudflare DNS → DMZ → Cosmos Cloud → Docker Network
# Wildcard certificate *.mrintellisense.com handled by Cosmos Cloud
# =============================================================================

services:
  # =============================================================================
  # DRONE SERVER - Main CI/CD orchestrator and web interface
  # =============================================================================
  drone-server:
    image: drone/drone:2
    container_name: drone_server
    hostname: drone-server
    
    # Port exposure: Only expose to Docker network for Cosmos Cloud discovery
    # Cosmos Cloud will route drone.mrintellisense.com → http://drone-server:80
    ports:
      - "80"  # Expose port to Docker network only (Cosmos template uses port 80)
    
    # Persistent data storage for SQLite database and configuration
    volumes:
      - drone-server-data:/data  # Named volume for data persistence
     
    # Custom Docker network for service discovery
    networks:
      - drone-network
    
    # Environment configuration using .env file variables
    environment:
      # RPC Secret: Secure token for server-runner communication (from .env)
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      
      # Cookie Secret: Secure token for encrypting cookies (from .env)
      - DRONE_COOKIE_SECRET=${DRONE_COOKIE_SECRET}
      
      # Server host: Must match Cloudflare DNS subdomain (drone.mrintellisense.com)
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      
      # Protocol: HTTPS since Cosmos Cloud handles SSL termination with Let's Encrypt
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      
      # Server port: Configure Drone to run on port 8082 internally
      - DRONE_SERVER_PORT=${DRONE_SERVER_PORT}
      
      # GitHub OAuth integration for repository access control
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      
      # Admin user creation: MateoSudo with admin privileges (from .env)
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      
      # Database configuration: SQLite for simplicity in containerized environment
      - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER}  # sqlite3
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}  # /data/database.sqlite
      
      # Enhanced logging for debugging in Proxmox LXC environment
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_LOGS_DEBUG=true
    
    # Restart policy: Always restart unless explicitly stopped
    restart: unless-stopped
    
    # Health check to ensure service is responding
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DRONE RUNNER - Executes CI/CD pipelines with container deployment capability
  # =============================================================================
  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone_runner
    
    # Wait for Drone server to be healthy before starting
    depends_on:
      drone-server:
        condition: service_healthy
    
    # Use same Docker network for service discovery
    networks:
      - drone-network
    
    # Critical volume mounts for container deployment in CI/CD pipelines
    volumes:
      # Docker socket access: Enables runner to deploy containers using Docker
      # This is essential for CI/CD pipelines that deploy applications
      - /var/run/docker.sock:/var/run/docker.sock:rw
    
    # Runner configuration using .env file variables
    environment:
      # Connection to Drone server using Docker DNS (drone-server service name)
      - DRONE_RPC_HOST=${DRONE_RPC_HOST}  # drone-server:8082
      - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}  # http (internal communication)
      
      # Shared secret for secure server-runner authentication
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}  # Must match server secret
      
      # Runner capacity and identification (from .env)
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}  # Max concurrent builds (2)
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}  # docker-runner
      
      # Network configuration for pipeline containers - use Docker network
      - DRONE_RUNNER_NETWORKS=${DRONE_RUNNER_NETWORKS}  # drone-network
      
      # Enhanced debugging for troubleshooting in Proxmox environment
      - DRONE_DEBUG=true
      - DRONE_TRACE=true
    
    # Restart policy: Always restart unless explicitly stopped
    restart: unless-stopped
    
    # Privileged mode: Required for container operations and Docker socket access
    # SECURITY NOTE: This gives the runner full access to the host container runtime
    privileged: true
    
    # Health check for runner service
    healthcheck:
      test: ["CMD", "drone-runner-docker", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# =============================================================================
# DOCKER NETWORKS - Custom network for service discovery
# =============================================================================
networks:
  drone-network:
    driver: bridge
    name: drone-network

# =============================================================================
# COSMOS CLOUD INTEGRATION NOTES
# =============================================================================
# 1. Configure Cosmos Cloud to proxy: drone.mrintellisense.com → http://drone-server:8082
# 2. Ensure wildcard certificate *.mrintellisense.com covers drone subdomain
# 3. No SSL termination needed in containers (Cosmos Cloud handles HTTPS)
# 4. Verify Cloudflare DNS points drone.mrintellisense.com to DMZ static IP
# 5. Cosmos Cloud will auto-discover the drone-server container via Docker API
#
# CONTAINER DEPLOYMENT CAPABILITIES
# 1. Runner has access to Docker socket for deploying containers during CI/CD
# 2. Privileged mode enables full container management operations
# 3. Docker network configuration allows deployed containers to communicate
# 4. Pipeline containers can deploy applications to the same host using Docker
# 5. Docker's embedded DNS resolves service names automatically
#
# DOCKER DNS RESOLUTION
# 1. Server accessible at: drone-server:8082 (via Docker's embedded DNS)
# 2. External access via: https://drone.mrintellisense.com (Cosmos Cloud proxy)
# 3. Internal communication uses HTTP, external uses HTTPS (SSL termination)
# 4. Network isolation provides security between different services
#
# SECURITY CONSIDERATIONS
# 1. RPC_SECRET provides encrypted communication between server and runner
# 2. GitHub OAuth restricts access to authorized repository collaborators
# 3. Admin user (MateoSudo) has full access to all Drone functionality
# 4. Privileged runner access requires careful pipeline security review
# 5. Docker socket access enables container deployment but requires security review
# =============================================================================

# =============================================================================
# DOCKER VOLUMES
# =============================================================================
volumes:
  drone-server-data:
    driver: local