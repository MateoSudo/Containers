version: '3.8'

# =============================================================================
# Drone CI/CD Stack for Podman with Cosmos OS Proxy Integration
# =============================================================================
# This compose file deploys Drone server and runner for container-based CI/CD
# Traffic flows: Internet → Cloudflare DNS → DMZ → Cosmos OS → localhost:8080
# Wildcard certificate *.mrintellisense.com handled by Cosmos OS
# =============================================================================

services:
  # =============================================================================
  # DRONE SERVER - Main CI/CD orchestrator and web interface
  # =============================================================================
  drone-server:
    image: drone/drone:2
    container_name: drone_server
    
    # Port mapping: Internal 80 → Host 8080 for Cosmos OS proxy
    # Fixed port mapping - Drone runs on port 80 internally by default
    ports:
      - "8080:80"
    
    # Persistent data storage for SQLite database and configuration
    volumes:
      - ./drone_server_data:/data  # Local directory for data persistence
    
    # Internal network for secure communication with runner
    networks:
      - dronenet
    
    # Environment configuration using .env file variables
    environment:
      # RPC Secret: Secure token for server-runner communication (from .env)
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      
      # Cookie Secret: Secure token for encrypting cookies (from .env)
      - DRONE_COOKIE_SECRET=${DRONE_COOKIE_SECRET}
      
      # Server host: Must match Cloudflare DNS subdomain (drone.mrintellisense.com)
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      
      # Protocol: HTTP since Cosmos OS handles HTTPS termination with Let's Encrypt
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      
      # GitHub OAuth integration for repository access control
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      
      # Admin user creation: MateoSudo with admin privileges (from .env)
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      
      # Database configuration: SQLite for simplicity in containerized environment
      - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER}  # sqlite3
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}  # /data/database.sqlite
      
      # Enhanced logging for debugging in Proxmox LXC environment
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
      - DRONE_LOGS_DEBUG=true
    
    # Restart policy: Always restart unless explicitly stopped
    restart: unless-stopped
    
    # Health check to ensure service is responding
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DRONE RUNNER - Executes CI/CD pipelines with container deployment capability
  # =============================================================================
  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone_runner
    
    # Wait for Drone server to be healthy before starting
    depends_on:
      drone-server:
        condition: service_healthy
    
    # No external ports needed - runner communicates internally with server
    
    # Critical volume mounts for container deployment in CI/CD pipelines
    volumes:
      # Podman socket access: Enables runner to deploy containers on localhost
      # This is essential for CI/CD pipelines that deploy applications
      - /run/podman/podman.sock:/var/run/docker.sock:rw
      
      # Alternative if symlink exists: - /var/run/docker.sock:/var/run/docker.sock:rw
    
    # Internal network connection to communicate with Drone server
    networks:
      - dronenet
    
    # Runner configuration using .env file variables
    environment:
      # Connection to Drone server using service name (better for podman-compose)
      - DRONE_RPC_HOST=drone-server:80
      - DRONE_RPC_PROTO=http
      
      # Shared secret for secure server-runner authentication
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}  # Must match server secret
      
      # Runner capacity and identification (from .env)
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}  # Max concurrent builds (2)
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}  # podman-runner
      
      # Network configuration for pipeline containers
      - DRONE_RUNNER_NETWORKS=${DRONE_RUNNER_NETWORKS}  # dronenet
      
      # Enhanced debugging for troubleshooting in Proxmox environment
      - DRONE_DEBUG=true
      - DRONE_TRACE=true
    
    # Restart policy: Always restart unless explicitly stopped
    restart: unless-stopped
    
    # Privileged mode: Required for container operations and Podman socket access
    # SECURITY NOTE: This gives the runner full access to the host container runtime
    privileged: true
    
    # Health check for runner service
    healthcheck:
      test: ["CMD", "drone-runner-docker", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# =============================================================================
# NETWORKING CONFIGURATION
# =============================================================================
networks:
  dronenet:
    # Bridge network for internal communication between Drone components
    # Simplified for podman-compose compatibility
    driver: bridge

# =============================================================================
# COSMOS OS INTEGRATION NOTES
# =============================================================================
# 1. Configure Cosmos OS to proxy: drone.mrintellisense.com → http://localhost:8080
# 2. Ensure wildcard certificate *.mrintellisense.com covers drone subdomain
# 3. No SSL termination needed in containers (Cosmos handles HTTPS)
# 4. Verify Cloudflare DNS points drone.mrintellisense.com to DMZ static IP
#
# CONTAINER DEPLOYMENT CAPABILITIES
# 1. Runner has access to Podman socket for deploying containers during CI/CD
# 2. Privileged mode enables full container management operations
# 3. Network configuration allows deployed containers to communicate
# 4. Pipeline containers can deploy applications to the same host
#
# SECURITY CONSIDERATIONS
# 1. RPC_SECRET provides encrypted communication between server and runner
# 2. GitHub OAuth restricts access to authorized repository collaborators
# 3. Admin user (MateoSudo) has full access to all Drone functionality
# 4. Privileged runner access requires careful pipeline security review
# =============================================================================
