services:
  # PIA VPN Container - Routes all torrent traffic
  pia-vpn:
    image: qmcgaw/private-internet-access:latest
    container_name: torrent-pia-vpn
    hostname: pia-vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - OPENVPN_USER=${PIA_USER}
      - OPENVPN_PASSWORD=${PIA_PASS}
      - SERVER_REGIONS=${LOC:-netherlands}
      - VPN_SERVICE_PROVIDER=private internet access
      - VPN_TYPE=openvpn
      - OPENVPN_PROTOCOL=udp
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_STATUS_FILE=/tmp/gluetun/forwarded_port
    volumes:
      - /tmp/gluetun:/tmp/gluetun
    ports:
      - "8083:8080"  # qBittorrent WebUI
      - "6881:6881"  # qBittorrent TCP
      - "6881:6881/udp"  # qBittorrent UDP
    networks:
      - media-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # qBittorrent - Web UI accessible, downloads forced through VPN
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: torrent-qbittorrent
    hostname: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - WEBUI_PORT=8080
      - QBT_WEBUI_AUTH=false
      - QBT_WEBUI_PASSWORD=
      - QBT_WEBUI_USERNAME=
    volumes:
      - ./config/qbittorrent:/config
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/torrents:/torrents
      - /dev/net/tun:/dev/net/tun:rw
    ports:
      - "8084:8080"  # qBittorrent Web UI
    networks:
      - media-network
    depends_on:
      - pia-vpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun



  # Sonarr - TV Series Management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: torrent-sonarr
    hostname: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/sonarr:/config
      - /mnt/truenas/media/tv:/tv
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8989:8989"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - qbittorrent



  # Radarr - Movie Management
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: torrent-radarr
    hostname: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/radarr:/config
      - /mnt/truenas/media/movies:/movies
      - /mnt/truenas/downloads:/downloads
    ports:
      - "7878:7878"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - qbittorrent

  # All *arr Services Initialization
  arr-services-init:
    image: alpine:latest
    container_name: torrent-arr-services-init
    volumes:
      - ./config/radarr:/config/radarr
      - ./config/sonarr:/config/sonarr
      - ./config/lidarr:/config/lidarr
      - ./config/prowlarr:/config/prowlarr
      - /mnt/truenas/downloads:/downloads
    command: >
      sh -c "
        apk add --no-cache sqlite curl &&
        echo 'üöÄ Configuring all *arr services with qBittorrent...' &&
        sleep 45 &&
        
        # Wait for all services to be ready
        echo 'Waiting for services to start...' &&
        for service in radarr sonarr lidarr prowlarr; do
          while [ ! -f /config/\$$service/\$$service.db ]; do
            echo \"Waiting for \$$service database...\"
            sleep 5
          done
          echo \"‚úÖ \$$service database ready\"
        done &&
        sleep 15 &&
        
        # Configure Radarr
        echo 'üé¨ Configuring Radarr...' &&
        EXISTING=$$(sqlite3 /config/radarr/radarr.db \"SELECT COUNT(*) FROM DownloadClients WHERE Name='qBittorrent';\" 2>/dev/null || echo \"0\") &&
        if [ \"$$EXISTING\" = \"0\" ]; then
           sqlite3 /config/radarr/radarr.db \"INSERT INTO DownloadClients (Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads) VALUES (1, 'qBittorrent', 'QBittorrent', '{\\\"host\\\": \\\"qbittorrent\\\", \\\"port\\\": 8080, \\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"Eu66HbQV9\\\", \\\"category\\\": \\\"movies\\\", \\\"recentMoviePriority\\\": 0, \\\"olderMoviePriority\\\": 0, \\\"initialState\\\": 0, \\\"sequentialOrder\\\": false, \\\"firstAndLast\\\": false, \\\"useSsl\\\": false, \\\"urlBase\\\": \\\"\\\"}', 'QBittorrentSettings', 1, 1, 1);\" &&
          echo '‚úÖ qBittorrent added to Radarr'
        fi &&
        
        # Configure Sonarr
        echo 'üì∫ Configuring Sonarr...' &&
        EXISTING=$$(sqlite3 /config/sonarr/sonarr.db \"SELECT COUNT(*) FROM DownloadClients WHERE Name='qBittorrent';\" 2>/dev/null || echo \"0\") &&
        if [ \"$$EXISTING\" = \"0\" ]; then
           sqlite3 /config/sonarr/sonarr.db \"INSERT INTO DownloadClients (Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads) VALUES (1, 'qBittorrent', 'QBittorrent', '{\\\"host\\\": \\\"qbittorrent\\\", \\\"port\\\": 8080, \\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"Eu66HbQV9\\\", \\\"category\\\": \\\"tv\\\", \\\"recentTvPriority\\\": 0, \\\"olderTvPriority\\\": 0, \\\"initialState\\\": 0, \\\"sequentialOrder\\\": false, \\\"firstAndLast\\\": false, \\\"useSsl\\\": false, \\\"urlBase\\\": \\\"\\\"}', 'QBittorrentSettings', 1, 1, 1);\" &&
          echo '‚úÖ qBittorrent added to Sonarr'
        fi &&
        
        # Configure Lidarr
        echo 'üéµ Configuring Lidarr...' &&
        EXISTING=$$(sqlite3 /config/lidarr/lidarr.db \"SELECT COUNT(*) FROM DownloadClients WHERE Name='qBittorrent';\" 2>/dev/null || echo \"0\") &&
        if [ \"$$EXISTING\" = \"0\" ]; then
           sqlite3 /config/lidarr/lidarr.db \"INSERT INTO DownloadClients (Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads) VALUES (1, 'qBittorrent', 'QBittorrent', '{\\\"host\\\": \\\"qbittorrent\\\", \\\"port\\\": 8080, \\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"Eu66HbQV9\\\", \\\"category\\\": \\\"music\\\", \\\"recentTvPriority\\\": 0, \\\"olderTvPriority\\\": 0, \\\"initialState\\\": 0, \\\"sequentialOrder\\\": false, \\\"firstAndLast\\\": false, \\\"useSsl\\\": false, \\\"urlBase\\\": \\\"\\\"}', 'QBittorrentSettings', 1, 1, 1);\" &&
          echo '‚úÖ qBittorrent added to Lidarr'
        fi &&
        
        # Create download directories
        echo 'üìÅ Creating download directories...' &&
        mkdir -p /downloads/complete/{movies,tv,music} &&
        mkdir -p /downloads/incomplete/{movies,tv,music} &&
        chown -R 1000:1000 /downloads &&
        
        echo 'üéâ All *arr services configured with qBittorrent successfully!'
      "
    depends_on:
      - radarr
      - sonarr  
      - lidarr
      - prowlarr
      - qbittorrent
    networks:
      - media-network
    restart: "no"

  # Lidarr - Music Management
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: torrent-lidarr
    hostname: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/lidarr:/config
      - /mnt/truenas/media/music:/music
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8686:8686"
    networks:
      - media-network
    restart: unless-stopped

  # Prowlarr - Indexer Management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: torrent-prowlarr
    hostname: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/prowlarr:/config
    ports:
      - "9696:9696"
    networks:
      - media-network
    restart: unless-stopped

  # Jellyfin - Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: torrent-jellyfin
    hostname: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/jellyfin:/config
      - /mnt/truenas/media:/media
    ports:
      - "8096:8096"
    networks:
      - media-network
    restart: unless-stopped



networks:
  media-network:
    driver: bridge
    name: torrent_media_network 