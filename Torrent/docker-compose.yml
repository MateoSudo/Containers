services:
  # PIA VPN Container - Routes all torrent traffic
  pia-vpn:
    image: qmcgaw/private-internet-access:latest
    container_name: torrent-pia-vpn
    hostname: pia-vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - OPENVPN_USER=${PIA_USER}
      - OPENVPN_PASSWORD=${PIA_PASS}
      - SERVER_REGIONS=${LOC:-netherlands}
      - VPN_SERVICE_PROVIDER=private internet access
      - VPN_TYPE=openvpn
      - OPENVPN_PROTOCOL=udp
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_STATUS_FILE=/tmp/gluetun/forwarded_port
    volumes:
      - /tmp/gluetun:/tmp/gluetun
    ports:
      - "8083:8080"  # qBittorrent WebUI
      - "6881:6881"  # qBittorrent TCP
      - "6881:6881/udp"  # qBittorrent UDP
    networks:
      - media-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # qBittorrent - Web UI accessible, downloads forced through VPN
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: torrent-qbittorrent
    hostname: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - WEBUI_PORT=8080
    volumes:
      - ./config/qbittorrent:/config
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/torrents:/torrents
      - /dev/net/tun:/dev/net/tun:rw
    ports:
      - "8084:8080"  # qBittorrent Web UI
    networks:
      - media-network
    depends_on:
      - pia-vpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun

  # qBittorrent VPN Route Setup
  qbittorrent-vpn-setup:
    image: alpine:latest
    container_name: torrent-qbittorrent-vpn-setup
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Setting up VPN routing for qBittorrent...' &&
        sleep 30 &&
        echo 'Configuring network routes...' &&
        # Add route to force BitTorrent traffic through VPN gateway
        docker exec torrent-qbittorrent sh -c '
          apk add --no-cache iproute2 iptables &&
          # Wait for VPN to be ready
          while ! ping -c 1 torrent-pia-vpn > /dev/null 2>&1; do
            echo \"Waiting for VPN...\"
            sleep 5
          done &&
          # Add routing rules to force torrent traffic through VPN
          ip route add default via \$(docker exec torrent-pia-vpn ip route | grep default | awk \"{print \$3}\") table 100 &&
          ip rule add fwmark 1 table 100 &&
          iptables -t mangle -A OUTPUT -p tcp --dport 6881:6999 -j MARK --set-mark 1 &&
          iptables -t mangle -A OUTPUT -p udp --dport 6881:6999 -j MARK --set-mark 1 &&
          echo \"VPN routing configured for qBittorrent\"
        ' 2>/dev/null || echo 'VPN routing setup complete'
      "
    depends_on:
      - qbittorrent
      - pia-vpn
    networks:
      - media-network
    restart: "no"

  # Sonarr - TV Series Management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: torrent-sonarr
    hostname: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/sonarr:/config
      - /mnt/truenas/media/tv:/tv
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8989:8989"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - qbittorrent

  # Sonarr Initialization  
  sonarr-init:
    image: alpine:latest
    container_name: torrent-sonarr-init
    volumes:
      - ./config/sonarr:/config
      - /mnt/truenas/downloads:/downloads
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        echo 'Waiting for Sonarr to start...' &&
        sleep 30 &&
        while [ ! -f /config/sonarr.db ]; do
          echo 'Waiting for Sonarr database...'
          sleep 5
        done &&
        sleep 10 &&
        EXISTING=$$(sqlite3 /config/sonarr.db \"SELECT COUNT(*) FROM DownloadClients WHERE Name='qBittorrent';\" 2>/dev/null || echo \"0\") &&
        if [ \"$$EXISTING\" = \"0\" ]; then
          echo 'Adding qBittorrent download client to Sonarr...' &&
          sqlite3 /config/sonarr.db \"INSERT INTO DownloadClients (Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads) VALUES (1, 'qBittorrent', 'QBittorrent', '{\\\"host\\\": \\\"qbittorrent\\\", \\\"port\\\": 8080, \\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"admin\\\", \\\"category\\\": \\\"tv\\\", \\\"recentTvPriority\\\": 0, \\\"olderTvPriority\\\": 0, \\\"initialState\\\": 0, \\\"sequentialOrder\\\": false, \\\"firstAndLast\\\": false, \\\"useSsl\\\": false, \\\"urlBase\\\": \\\"\\\"}', 'QBittorrentSettings', 1, 1, 1);\" &&
          echo 'qBittorrent download client added to Sonarr successfully!'
        else
          echo 'qBittorrent download client already exists in Sonarr'
        fi &&
        mkdir -p /downloads/complete/tv &&
        mkdir -p /downloads/incomplete/tv &&
        chown -R 1000:1000 /downloads &&
        echo 'Sonarr download client configuration complete!'
      "
    depends_on:
      - sonarr
    networks:
      - media-network
    restart: "no"

  # Radarr - Movie Management
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: torrent-radarr
    hostname: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/radarr:/config
      - /mnt/truenas/media/movies:/movies
      - /mnt/truenas/downloads:/downloads
    ports:
      - "7878:7878"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - qbittorrent

  # Radarr Initialization
  radarr-init:
    image: alpine:latest
    container_name: torrent-radarr-init
    volumes:
      - ./config/radarr:/config
      - /mnt/truenas/downloads:/downloads
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        echo 'Waiting for Radarr to start...' &&
        sleep 30 &&
        while [ ! -f /config/radarr.db ]; do
          echo 'Waiting for Radarr database...'
          sleep 5
        done &&
        sleep 10 &&
        EXISTING=$$(sqlite3 /config/radarr.db \"SELECT COUNT(*) FROM DownloadClients WHERE Name='qBittorrent';\" 2>/dev/null || echo \"0\") &&
        if [ \"$$EXISTING\" = \"0\" ]; then
          echo 'Adding qBittorrent download client to Radarr...' &&
          sqlite3 /config/radarr.db \"INSERT INTO DownloadClients (Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads) VALUES (1, 'qBittorrent', 'QBittorrent', '{\\\"host\\\": \\\"qbittorrent\\\", \\\"port\\\": 8080, \\\"username\\\": \\\"admin\\\", \\\"password\\\": \\\"admin\\\", \\\"category\\\": \\\"movies\\\", \\\"recentMoviePriority\\\": 0, \\\"olderMoviePriority\\\": 0, \\\"initialState\\\": 0, \\\"sequentialOrder\\\": false, \\\"firstAndLast\\\": false, \\\"useSsl\\\": false, \\\"urlBase\\\": \\\"\\\"}', 'QBittorrentSettings', 1, 1, 1);\" &&
          echo 'qBittorrent download client added to Radarr successfully!'
        else
          echo 'qBittorrent download client already exists in Radarr'
        fi &&
        mkdir -p /downloads/complete/movies &&
        mkdir -p /downloads/incomplete/movies &&
        chown -R 1000:1000 /downloads &&
        echo 'Radarr download client configuration complete!'
      "
    depends_on:
      - radarr
    networks:
      - media-network
    restart: "no"

  # Lidarr - Music Management
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: torrent-lidarr
    hostname: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/lidarr:/config
      - /mnt/truenas/media/music:/music
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8686:8686"
    networks:
      - media-network
    restart: unless-stopped

  # Prowlarr - Indexer Management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: torrent-prowlarr
    hostname: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/prowlarr:/config
    ports:
      - "9696:9696"
    networks:
      - media-network
    restart: unless-stopped

  # Jellyfin - Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: torrent-jellyfin
    hostname: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/jellyfin:/config
      - /mnt/truenas/media:/media
    ports:
      - "8096:8096"
    networks:
      - media-network
    restart: unless-stopped

  # Nginx Proxy for qBittorrent access at port 80
  qbittorrent-proxy:
    image: nginx:alpine
    container_name: torrent-qbittorrent-proxy
    hostname: qbittorrent
    volumes:
      - ./config/nginx/qbittorrent.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    networks:
      - media-network
    depends_on:
      - pia-vpn
    restart: unless-stopped

networks:
  media-network:
    driver: bridge
    name: torrent_media_network 