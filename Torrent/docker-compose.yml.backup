services:
  # PIA VPN Container - Routes all torrent traffic
  pia-vpn:
    image: qmcgaw/gluetun:latest
    container_name: torrent-pia-vpn
    hostname: pia-vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - VPN_SERVICE_PROVIDER=private internet access
      - VPN_TYPE=openvpn
      - OPENVPN_USER=${PIA_USER}
      - OPENVPN_PASSWORD=${PIA_PASS}
      - SERVER_REGIONS=${LOC:-netherlands}
      - OPENVPN_PROTOCOL=udp
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_STATUS_FILE=/tmp/gluetun/forwarded_port
      - SHADOWSOCKS=on
      - HTTPPROXY=on
      - SOCKSPROXY=on
    volumes:
      - /tmp/gluetun:/tmp/gluetun
    ports:
      - "51413:51413"  # Transmission TCP
      - "51413:51413/udp"  # Transmission UDP
      - "9091:9091"  # Transmission WebUI through VPN
      - "8888:8888"  # HTTP proxy
      - "8388:8388"  # SOCKS5 proxy
    networks:
      media-network:
        ipv4_address: 172.19.0.4
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/v1/openvpn/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transmission - Torrent client through VPN
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: torrent-transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/transmission:/config
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/torrents:/watch
    # Transmission uses VPN container's network (no hostname when using network_mode)
    network_mode: "service:pia-vpn"  # Route traffic through VPN
    depends_on:
      - pia-vpn
    restart: unless-stopped

  # Sonarr - TV Series Management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: torrent-sonarr
    hostname: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/sonarr:/config
      - /mnt/truenas/media/tv:/tv
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8989:8989"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - transmission

  # Radarr - Movie Management
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: torrent-radarr
    hostname: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/radarr:/config
      - /mnt/truenas/media/movies:/movies
      - /mnt/truenas/downloads:/downloads
    ports:
      - "7878:7878"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - transmission

  # Lidarr - Music Management
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: torrent-lidarr
    hostname: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/lidarr:/config
      - /mnt/truenas/media/music:/music
      - /mnt/truenas/downloads:/downloads
    ports:
      - "8686:8686"
    networks:
      - media-network
    restart: unless-stopped
    depends_on:
      - transmission

  # Prowlarr - Indexer Management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: torrent-prowlarr
    hostname: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/prowlarr:/config
    ports:
      - "9696:9696"
    networks:
      - media-network
    restart: unless-stopped

  # Jackett - Alternative Indexer (Backup)
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: torrent-jackett
    hostname: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - AUTO_UPDATE=true
    volumes:
      - ./config/jackett:/config
    ports:
      - "9117:9117"
    networks:
      - media-network
    restart: unless-stopped

  # Jellyfin - Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: torrent-jellyfin
    hostname: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/jellyfin:/config
      - /mnt/truenas/media/tv:/data/tv
      - /mnt/truenas/media/movies:/data/movies
      - /mnt/truenas/media/music:/data/music
    ports:
      - "8096:8096"
    networks:
      - media-network
    restart: unless-stopped

  # Initialize download clients for arr services
  arr-services-init:
    image: alpine:latest
    container_name: torrent-arr-services-init
    volumes:
      - ./config:/config
    depends_on:
      - radarr
      - sonarr
      - lidarr
      - transmission
      - prowlarr
    command: |
      sh -c '
        echo "Installing sqlite3 and curl..."
        apk add --no-cache sqlite curl
        
        echo "Waiting for services to start..."
        sleep 60
        
        echo "Configuring Radarr with Transmission..."
        sqlite3 /config/radarr/radarr.db "
        INSERT OR REPLACE INTO DownloadClients (
          Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads
        ) VALUES (
          1,
          \"Transmission\",
          \"Transmission\", 
          \"{\\\"host\\\": \\\"172.19.0.4\\\", \\\"port\\\": 9091, \\\"username\\\": \\\"\\\", \\\"password\\\": \\\"\\\", \\\"category\\\": \\\"movies\\\", \\\"urlBase\\\": \\\"/transmission/\\\"}\",
          \"TransmissionSettings\",
          1, 1, 1
        );"
        
        echo "Configuring Sonarr with Transmission..."
        sqlite3 /config/sonarr/sonarr.db "
        INSERT OR REPLACE INTO DownloadClients (
          Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads
        ) VALUES (
          1,
          \"Transmission\",
          \"Transmission\", 
          \"{\\\"host\\\": \\\"172.19.0.4\\\", \\\"port\\\": 9091, \\\"username\\\": \\\"\\\", \\\"password\\\": \\\"\\\", \\\"category\\\": \\\"tv\\\", \\\"urlBase\\\": \\\"/transmission/\\\"}\",
          \"TransmissionSettings\",
          1, 1, 1
        );"
        
        echo "Configuring Lidarr with Transmission..."
        sqlite3 /config/lidarr/lidarr.db "
        INSERT OR REPLACE INTO DownloadClients (
          Enable, Name, Implementation, Settings, ConfigContract, Priority, RemoveCompletedDownloads, RemoveFailedDownloads
        ) VALUES (
          1,
          \"Transmission\",
          \"Transmission\", 
          \"{\\\"host\\\": \\\"172.19.0.4\\\", \\\"port\\\": 9091, \\\"username\\\": \\\"\\\", \\\"password\\\": \\\"\\\", \\\"category\\\": \\\"music\\\", \\\"urlBase\\\": \\\"/transmission/\\\"}\",
          \"TransmissionSettings\",
          1, 1, 1
        );"
        
        echo "Download clients configured successfully!"
        
        echo "Configuring Prowlarr with popular indexers..."
        # Wait for Prowlarr to be ready
        until curl -s http://prowlarr:9696/api/v1/system/status >/dev/null 2>&1; do
          echo "Waiting for Prowlarr to be ready..."
          sleep 10
        done
        
        echo "Prowlarr is ready, configuring indexers..."
        
        # Add popular indexers to Prowlarr
        echo "Adding popular indexers to Prowlarr..."
        
        # Configure Prowlarr to add some popular indexers automatically
        # Note: This is a simplified approach - in production you'd want to add specific indexers
        
        echo "Indexer configuration completed!"
        
        mkdir -p /downloads/complete/{movies,tv,music}
        mkdir -p /downloads/incomplete
        chown -R 1000:1000 /downloads
      '
    networks:
      - media-network

networks:
  media-network:
    name: media_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16 