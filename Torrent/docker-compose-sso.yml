version: '3.8'

services:
  # Traefik Reverse Proxy with SSL
  traefik:
    image: traefik:v2.10
    container_name: torrent-traefik
    hostname: traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@mrintellisense.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/letsencrypt:/letsencrypt
      - ./config/traefik:/etc/traefik
    networks:
      media-network:
        ipv4_address: 172.19.0.2
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.mrintellisense.com`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: torrent-keycloak
    hostname: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak123
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
    volumes:
      - ./config/keycloak:/opt/keycloak/data
    networks:
      media-network:
        ipv4_address: 172.19.0.3
    restart: unless-stopped
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.mrintellisense.com`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

  # PostgreSQL for Keycloak
  postgres:
    image: postgres:15
    container_name: torrent-postgres
    hostname: postgres
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak123
    volumes:
      - ./config/postgres:/var/lib/postgresql/data
    networks:
      media-network:
        ipv4_address: 172.19.0.11
    restart: unless-stopped

  # PIA VPN Container - Routes torrent traffic only
  pia-vpn:
    image: qmcgaw/gluetun:latest
    container_name: torrent-pia-vpn
    hostname: pia-vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - VPN_SERVICE_PROVIDER=private internet access
      - VPN_TYPE=openvpn
      - OPENVPN_USER=${PIA_USER}
      - OPENVPN_PASSWORD=${PIA_PASS}
      - SERVER_REGIONS=${LOC:-netherlands}
      - OPENVPN_PROTOCOL=udp
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_STATUS_FILE=/tmp/gluetun/forwarded_port
      - SHADOWSOCKS=on
      - HTTPPROXY=on
      - SOCKSPROXY=on
    volumes:
      - /tmp/gluetun:/tmp/gluetun
    ports:
      - "51413:51413"  # Transmission TCP
      - "51413:51413/udp"  # Transmission UDP
      - "9091:9091"  # Transmission WebUI through VPN
      - "8888:8888"  # HTTP proxy
      - "8388:8388"  # SOCKS5 proxy
    networks:
      media-network:
        ipv4_address: 172.19.0.4
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/v1/openvpn/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transmission - Torrent client through VPN
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: torrent-transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/transmission:/config
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/torrents:/watch
    # Transmission uses VPN container's network (no hostname when using network_mode)
    network_mode: "service:pia-vpn"  # Route traffic through VPN
    depends_on:
      - pia-vpn
    restart: unless-stopped

  # Sonarr - TV Series Management (with SSO)
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: torrent-sonarr
    hostname: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/sonarr:/config
      - /mnt/truenas/media/tv:/tv
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/downloads/complete/tv:/downloads/complete/sonarr
    networks:
      media-network:
        ipv4_address: 172.19.0.5
    restart: unless-stopped
    depends_on:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.mrintellisense.com`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      - "traefik.http.routers.sonarr.middlewares=auth@file"

  # Radarr - Movie Management (with SSO)
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: torrent-radarr
    hostname: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/radarr:/config
      - /mnt/truenas/media/movies:/movies
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/downloads/complete/movies:/downloads/complete/radarr
    networks:
      media-network:
        ipv4_address: 172.19.0.6
    restart: unless-stopped
    depends_on:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.mrintellisense.com`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      - "traefik.http.routers.radarr.middlewares=auth@file"

  # Lidarr - Music Management (with SSO)
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: torrent-lidarr
    hostname: lidarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/lidarr:/config
      - /mnt/truenas/media/music:/music
      - /mnt/truenas/downloads:/downloads
      - /mnt/truenas/downloads/complete/music:/downloads/complete/lidarr
    networks:
      media-network:
        ipv4_address: 172.19.0.7
    restart: unless-stopped
    depends_on:
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.mrintellisense.com`)"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
      - "traefik.http.routers.lidarr.middlewares=auth@file"

  # Prowlarr - Indexer Management (with SSO)
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: torrent-prowlarr
    hostname: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/prowlarr:/config
    networks:
      media-network:
        ipv4_address: 172.19.0.9
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.mrintellisense.com`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      - "traefik.http.routers.prowlarr.middlewares=auth@file"

  # Jackett - Alternative Indexer (with SSO)
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: torrent-jackett
    hostname: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
      - AUTO_UPDATE=true
    volumes:
      - ./config/jackett:/config
    networks:
      media-network:
        ipv4_address: 172.19.0.10
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.mrintellisense.com`)"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.tls.certresolver=letsencrypt"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
      - "traefik.http.routers.jackett.middlewares=auth@file"

  # Jellyfin - Media Server (with SSO)
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: torrent-jellyfin
    hostname: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Chicago
    volumes:
      - ./config/jellyfin:/config
      - /mnt/truenas/media/tv:/data/tv
      - /mnt/truenas/media/movies:/data/movies
      - /mnt/truenas/media/music:/data/music
    networks:
      media-network:
        ipv4_address: 172.19.0.8
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.mrintellisense.com`)"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls.certresolver=letsencrypt"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.http.routers.jellyfin.middlewares=auth@file"

networks:
  media-network:
    name: media_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16 